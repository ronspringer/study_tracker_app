# Generated by Django 5.1.2 on 2024-10-30 17:38

# Import necessary modules from Django
from django.db import migrations
from django.contrib.auth import get_user_model
from django.utils import timezone
from datetime import datetime  # Import datetime to create datetime objects

# Function to create initial data for testing
def create_initial_data(apps, schema_editor):
    User = apps.get_model('auth', 'User')  # Retrieve User model through apps.get_model()

    superuser = User.objects.create_superuser(
        username='ronaldo.springer',
        email='ronaldospringer@gmail.com',
        password='superpassword',
        last_login=timezone.now()  # Set last_login to the current time
    )

    regular_user = User.objects.create_user(
        username='tom.jones',
        email='tomjones@gmail.com',
        password='userpassword',
        last_login=timezone.now()  # Set last_login to the current time
    )

    # Retrieve Subject and StudySession models dynamically
    Subject = apps.get_model('api', 'Subject')
    StudySession = apps.get_model('api', 'StudySession')

    # Create subjects for the regular user
    subjects = [
        Subject.objects.create(user=regular_user, subject_name='Mathematics'),
        Subject.objects.create(user=regular_user, subject_name='History'),
        Subject.objects.create(user=regular_user, subject_name='Biology'),
    ]

    # Create study sessions for each subject based on outcomes
    for subject in subjects:
        # For Duration Suggestions
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 1, 10, 0)), duration_minutes=20, notes='Short session.')
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 2, 10, 0)), duration_minutes=30, notes='Medium session.')
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 3, 10, 0)), duration_minutes=50, notes='Long session.')

        # For Focus Suggestions
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 4, 8, 0)), duration_minutes=25, notes='Focused morning session.')
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 5, 14, 0)), duration_minutes=40, notes='Afternoon focus session.')
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 6, 19, 0)), duration_minutes=60, notes='Evening deep focus session.')

        # For Time Suggestions
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 7, 6, 0)), duration_minutes=30, notes='Early morning study.')
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 8, 12, 0)), duration_minutes=30, notes='Afternoon study.')
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 9, 20, 0)), duration_minutes=30, notes='Evening review session.')
        StudySession.objects.create(subject=subject, session_date=timezone.make_aware(datetime(2024, 10, 10, 23, 0)), duration_minutes=30, notes='Late night session.')

    # Note: Progress will be updated automatically by the signal

class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),  # Adjust if needed
        ('api', '0002_alter_studysession_session_date'),  # Adjust if needed
    ]

    operations = [
        migrations.RunPython(create_initial_data),
    ]
